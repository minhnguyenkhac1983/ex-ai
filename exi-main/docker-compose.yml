version: '3.8'

services:
  # Database Services
  postgres-main:
    image: postgres:15
    environment:
      POSTGRES_DB: exi_main
      POSTGRES_USER: exi_user
      POSTGRES_PASSWORD: exi_password
    volumes:
      - postgres_main_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - exi-network

  postgres-ifrs9:
    image: postgres:15
    environment:
      POSTGRES_DB: exi_ifrs9
      POSTGRES_USER: exi_user
      POSTGRES_PASSWORD: exi_password
    volumes:
      - postgres_ifrs9_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - exi-network

  postgres-ifrs15:
    image: postgres:15
    environment:
      POSTGRES_DB: exi_ifrs15
      POSTGRES_USER: exi_user
      POSTGRES_PASSWORD: exi_password
    volumes:
      - postgres_ifrs15_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - exi-network

  postgres-ifrs17:
    image: postgres:15
    environment:
      POSTGRES_DB: exi_ifrs17
      POSTGRES_USER: exi_user
      POSTGRES_PASSWORD: exi_password
    volumes:
      - postgres_ifrs17_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    networks:
      - exi-network

  postgres-solvency2:
    image: postgres:15
    environment:
      POSTGRES_DB: exi_solvency2
      POSTGRES_USER: exi_user
      POSTGRES_PASSWORD: exi_password
    volumes:
      - postgres_solvency2_data:/var/lib/postgresql/data
    ports:
      - "5436:5432"
    networks:
      - exi-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - exi-network

  # API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - IFRS9_SERVICE_URL=http://ifrs9-service:3001
      - IFRS15_SERVICE_URL=http://ifrs15-service:3002
      - IFRS17_SERVICE_URL=http://ifrs17-service:3003
      - SOLVENCY2_SERVICE_URL=http://solvency2-service:3004
    depends_on:
      - redis
      - ifrs9-service
      - ifrs15-service
      - ifrs17-service
      - solvency2-service
    networks:
      - exi-network

  # IFRS 9 Service
  ifrs9-service:
    build:
      context: ./backend/ifrs9-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://exi_user:exi_password@postgres-ifrs9:5432/exi_ifrs9
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres-ifrs9
      - redis
    networks:
      - exi-network

  # IFRS 15 Service
  ifrs15-service:
    build:
      context: ./backend/ifrs15-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://exi_user:exi_password@postgres-ifrs15:5432/exi_ifrs15
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres-ifrs15
      - redis
    networks:
      - exi-network

  # IFRS 17 Service
  ifrs17-service:
    build:
      context: ./backend/ifrs17-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://exi_user:exi_password@postgres-ifrs17:5432/exi_ifrs17
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres-ifrs17
      - redis
    networks:
      - exi-network

  # Solvency II Service
  solvency2-service:
    build:
      context: ./backend/solvency2-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DATABASE_URL=postgresql://exi_user:exi_password@postgres-solvency2:5432/exi_solvency2
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres-solvency2
      - redis
    networks:
      - exi-network

  # Frontend Services
  user-portal:
    build:
      context: ./frontend/user-portal
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - REACT_APP_API_URL=http://api-gateway:3000
    depends_on:
      - api-gateway
    networks:
      - exi-network

  admin-portal:
    build:
      context: ./frontend/admin-portal
      dockerfile: Dockerfile
    ports:
      - "8081:80"
    environment:
      - REACT_APP_API_URL=http://api-gateway:3000
    depends_on:
      - api-gateway
    networks:
      - exi-network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - exi-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - exi-network

  # Security Services
  vault:
    image: vault:latest
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
    networks:
      - exi-network

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - user-portal
      - admin-portal
    networks:
      - exi-network

volumes:
  postgres_main_data:
  postgres_ifrs9_data:
  postgres_ifrs15_data:
  postgres_ifrs17_data:
  postgres_solvency2_data:
  redis_data:
  prometheus_data:
  grafana_data:
  vault_data:

networks:
  exi-network:
    driver: bridge