apiVersion: v1
kind: ServiceAccount
metadata:
  name: chaos-pod-killer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chaos-pod-killer
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chaos-pod-killer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chaos-pod-killer
subjects:
  - kind: ServiceAccount
    name: chaos-pod-killer
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: wallet-pod-delete-chaos
spec:
  schedule: "*/15 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: chaos-pod-killer
          restartPolicy: OnFailure
          containers:
            - name: killer
              image: bitnami/kubectl:1.30
              command:
                - /bin/sh
                - -c
                - |
                  set -euo pipefail
                  pods=$(kubectl get pods -l app=wallet-service -o jsonpath='{.items[*].metadata.name}')
                  if [ -z "$pods" ]; then echo "no wallet pods"; exit 0; fi
                  set -- $pods
                  # pick first pod (simple); for randomness, pick by $RANDOM modulo count
                  victim=$1
                  echo "Deleting pod: $victim"
                  kubectl delete pod "$victim" --grace-period=0 --force

