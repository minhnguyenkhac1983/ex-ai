version: '3.9'

services:
  # ========================================
  # DATABASES
  # ========================================
  
  postgresql:
    image: postgres:latest
    container_name: exs-postgresql
    environment:
      POSTGRES_DB: exs_trading
      POSTGRES_USER: exs_user
      POSTGRES_PASSWORD: exs_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./databases/postgresql/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - exs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U exs_user -d exs_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:latest
    container_name: exs-redis
    command: redis-server --appendonly yes --requirepass exs_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: exs-clickhouse
    environment:
      CLICKHOUSE_DB: exs_analytics
      CLICKHOUSE_USER: exs_user
      CLICKHOUSE_PASSWORD: exs_password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./databases/clickhouse/init:/docker-entrypoint-initdb.d
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.0
    container_name: exs-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - exs-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # MESSAGE QUEUES & STREAMING
  # ========================================

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: exs-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - exs-network
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: exs-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    ports:
      - "9092:9092"
      - "9101:9101"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - exs-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # MICROSERVICES
  # ========================================

  trading-engine:
    build:
      context: ./microservices/trading-engine
      dockerfile: Dockerfile
    container_name: exs-trading-engine
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/exs_trading
      SPRING_DATASOURCE_USERNAME: exs_user
      SPRING_DATASOURCE_PASSWORD: exs_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: exs_redis_password
      SERVER_PORT: 8080
      MANAGEMENT_SERVER_PORT: 8081
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  order-management:
    build:
      context: ./microservices/order-management
      dockerfile: Dockerfile
    container_name: exs-order-management
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/exs_trading
      SPRING_DATASOURCE_USERNAME: exs_user
      SPRING_DATASOURCE_PASSWORD: exs_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: exs_redis_password
      SERVER_PORT: 8082
      MANAGEMENT_SERVER_PORT: 8083
    ports:
      - "8082:8082"
      - "8083:8083"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  market-data:
    build:
      context: ./microservices/market-data
      dockerfile: Dockerfile
    container_name: exs-market-data
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/exs_trading
      SPRING_DATASOURCE_USERNAME: exs_user
      SPRING_DATASOURCE_PASSWORD: exs_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: exs_redis_password
      SERVER_PORT: 8084
      MANAGEMENT_SERVER_PORT: 8085
    ports:
      - "8084:8084"
      - "8085:8085"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  risk-management:
    build:
      context: ./microservices/risk-management
      dockerfile: Dockerfile
    container_name: exs-risk-management
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/exs_trading
      SPRING_DATASOURCE_USERNAME: exs_user
      SPRING_DATASOURCE_PASSWORD: exs_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: exs_redis_password
      SERVER_PORT: 8086
      MANAGEMENT_SERVER_PORT: 8087
    ports:
      - "8086:8086"
      - "8087:8087"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-management:
    build:
      context: ./microservices/user-management
      dockerfile: Dockerfile
    container_name: exs-user-management
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/exs_trading
      SPRING_DATASOURCE_USERNAME: exs_user
      SPRING_DATASOURCE_PASSWORD: exs_password
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: exs_redis_password
      SERVER_PORT: 8088
      MANAGEMENT_SERVER_PORT: 8089
    ports:
      - "8088:8088"
      - "8089:8089"
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # API GATEWAY
  # ========================================

  api-gateway:
    image: nginx:latest
    container_name: exs-api-gateway
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - trading-engine
      - order-management
      - market-data
      - risk-management
      - user-management
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # FRONTEND APPLICATIONS
  # ========================================

  trading-platform:
    build:
      context: ./frontend/trading-platform
      dockerfile: Dockerfile
    container_name: exs-trading-platform
    environment:
      NEXT_PUBLIC_API_URL: http://localhost/api
      NEXT_PUBLIC_WS_URL: ws://localhost/ws
      NODE_ENV: development
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-dashboard:
    build:
      context: ./frontend/admin-dashboard
      dockerfile: Dockerfile
    container_name: exs-admin-dashboard
    environment:
      NEXT_PUBLIC_API_URL: http://localhost/api
      NEXT_PUBLIC_WS_URL: ws://localhost/ws
      NODE_ENV: development
    ports:
      - "3001:3000"
    depends_on:
      - api-gateway
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # MONITORING & OBSERVABILITY
  # ========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: exs-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: exs-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - exs-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: exs-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - exs-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # DEVELOPMENT TOOLS
  # ========================================

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: exs-kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    networks:
      - exs-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: exs-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:exs_redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - exs-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: exs-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@exs.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "8082:80"
    depends_on:
      - postgresql
    networks:
      - exs-network

# ========================================
# VOLUMES
# ========================================

volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  clickhouse_data:
    driver: local
  elasticsearch_data:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

# ========================================
# NETWORKS
# ========================================

networks:
  exs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
