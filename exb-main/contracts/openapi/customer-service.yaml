openapi: 3.1.0
info:
  title: Customer Service API
  description: API for managing customer information in EXB Banking System
  version: 1.0.0
  contact:
    name: EXB Banking Team
    email: api@exb.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.exb.com/v1
    description: Production server
  - url: https://staging-api.exb.com/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Development server

security:
  - oauth2:
      - read:customers
      - write:customers

paths:
  /customers:
    get:
      summary: List customers
      description: Retrieve a list of customers with pagination and filtering
      operationId: listCustomers
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: email
          in: query
          description: Filter by email address
          required: false
          schema:
            type: string
            format: email
        - name: status
          in: query
          description: Filter by customer status
          required: false
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, PENDING, SUSPENDED]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    post:
      summary: Create customer
      description: Create a new customer account
      operationId: createCustomer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Customer already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{customerId}:
    get:
      summary: Get customer by ID
      description: Retrieve customer information by customer ID
      operationId: getCustomerById
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    put:
      summary: Update customer
      description: Update customer information
      operationId: updateCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete customer
      description: Delete customer account (soft delete)
      operationId: deleteCustomer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Customer deleted successfully
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{customerId}/kyc:
    post:
      summary: Submit KYC
      description: Submit Know Your Customer (KYC) information
      operationId: submitKYC
      parameters:
        - name: customerId
          in: path
          required: true
          description: Customer ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KYCRequest'
      responses:
        '200':
          description: KYC submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KYCResponse'
        '400':
          description: Invalid KYC data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Customer unique identifier
        customerNumber:
          type: string
          description: Customer account number
        firstName:
          type: string
          description: Customer first name
        lastName:
          type: string
          description: Customer last name
        email:
          type: string
          format: email
          description: Customer email address
        phone:
          type: string
          description: Customer phone number
        dateOfBirth:
          type: string
          format: date
          description: Customer date of birth
        kycStatus:
          type: string
          enum: [PENDING, APPROVED, REJECTED, SUSPENDED]
          description: KYC verification status
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED]
          description: Customer account status
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - customerNumber
        - firstName
        - lastName
        - email
        - kycStatus
        - status
        - createdAt
        - updatedAt

    CreateCustomerRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        dateOfBirth:
          type: string
          format: date
      required:
        - firstName
        - lastName
        - email

    UpdateCustomerRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 100
        lastName:
          type: string
          minLength: 1
          maxLength: 100
        phone:
          type: string
          pattern: '^\+?[1-9]\d{1,14}$'
        dateOfBirth:
          type: string
          format: date

    CustomerResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Customer'
        message:
          type: string
          description: Response message

    CustomerListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        message:
          type: string
          description: Response message

    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        size:
          type: integer
          description: Number of items per page
        totalElements:
          type: integer
          description: Total number of elements
        totalPages:
          type: integer
          description: Total number of pages
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrevious:
          type: boolean
          description: Whether there is a previous page

    KYCRequest:
      type: object
      properties:
        documentType:
          type: string
          enum: [PASSPORT, NATIONAL_ID, DRIVERS_LICENSE]
        documentNumber:
          type: string
        documentImage:
          type: string
          format: uri
          description: URL to document image
        address:
          $ref: '#/components/schemas/Address'
      required:
        - documentType
        - documentNumber
        - address

    KYCResponse:
      type: object
      properties:
        kycId:
          type: string
          format: uuid
        status:
          type: string
          enum: [SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED]
        submittedAt:
          type: string
          format: date-time
        estimatedCompletion:
          type: string
          format: date-time
        message:
          type: string

    Address:
      type: object
      properties:
        streetAddress:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
      required:
        - streetAddress
        - city
        - country

    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
        timestamp:
          type: string
          format: date-time
        path:
          type: string

  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.exb.com/oauth/authorize
          tokenUrl: https://auth.exb.com/oauth/token
          scopes:
            read:customers: Read customer data
            write:customers: Write customer data
            admin:customers: Full customer management access
        clientCredentials:
          tokenUrl: https://auth.exb.com/oauth/token
          scopes:
            read:customers: Read customer data
            write:customers: Write customer data

tags:
  - name: customers
    description: Customer management operations
  - name: kyc
    description: Know Your Customer operations
